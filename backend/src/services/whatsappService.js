const twilio = require('twilio');
const whatsappConfig = require('../../config/whatsapp');

// Configuraci√≥n del cliente de Twilio
const client = twilio(whatsappConfig.accountSid, whatsappConfig.authToken);

// Funci√≥n para validar formato de n√∫mero de tel√©fono
const validarTelefono = (telefono) => {
  // Eliminar espacios, guiones y par√©ntesis
  const numeroLimpio = telefono.replace(/[\s\-\(\)]/g, '');
  
  // Validar formato b√°sico (debe empezar con + y tener al menos 10 d√≠gitos)
  const telefonoRegex = /^\+[1-9]\d{1,14}$/;
  return telefonoRegex.test(numeroLimpio);
};

// Funci√≥n para formatear n√∫mero de tel√©fono
const formatearTelefono = (telefono) => {
  // Eliminar espacios, guiones y par√©ntesis
  let numeroLimpio = telefono.replace(/[\s\-\(\)]/g, '');
  
  // Si no empieza con +, agregar +593 (c√≥digo de Ecuador)
  if (!numeroLimpio.startsWith('+')) {
    if (numeroLimpio.startsWith('0')) {
      // Si empieza con 0, reemplazar con +593
      numeroLimpio = '+593' + numeroLimpio.substring(1);
    } else if (numeroLimpio.startsWith('593')) {
      // Si empieza con 593, agregar +
      numeroLimpio = '+' + numeroLimpio;
    } else {
      // Si no tiene c√≥digo de pa√≠s, agregar +593
      numeroLimpio = '+593' + numeroLimpio;
    }
  }
  
  return numeroLimpio;
};

// Funci√≥n para enviar c√≥digo de verificaci√≥n por WhatsApp
const enviarCodigoWhatsApp = async (telefono, nombre, codigo) => {
  try {
    if (!validarTelefono(telefono)) {
      throw new Error('Formato de n√∫mero de tel√©fono inv√°lido');
    }

    const numeroFormateado = formatearTelefono(telefono);
    
    const mensaje = `üîê *Digital Sign - Verificaci√≥n*

Hola *${nombre}*,

Tu c√≥digo de verificaci√≥n es:

*${codigo}*

‚è∞ Este c√≥digo expira en 15 minutos.

üîí Si no solicitaste este c√≥digo, ignora este mensaje.

---
*Digital Sign - Sistema de Firma Digital*`;

    const message = await client.messages.create({
      body: mensaje,
      from: `whatsapp:${whatsappConfig.fromNumber}`,
      to: `whatsapp:${numeroFormateado}`
    });

    console.log('‚úÖ C√≥digo WhatsApp enviado:', message.sid);
    return {
      success: true,
      messageId: message.sid,
      to: numeroFormateado
    };

  } catch (error) {
    console.error('‚ùå Error enviando c√≥digo WhatsApp:', error);
    
    // En desarrollo, simular env√≠o exitoso
    if (process.env.NODE_ENV === 'development') {
      console.log('üîÑ Modo desarrollo: Simulando env√≠o exitoso');
      return {
        success: true,
        messageId: 'dev-simulated-' + Date.now(),
        to: numeroFormateado
      };
    }
    
    // Manejar errores espec√≠ficos de Twilio
    if (error.code === 21211) {
      throw new Error('N√∫mero de tel√©fono inv√°lido');
    } else if (error.code === 21214) {
      throw new Error('N√∫mero de tel√©fono no est√° registrado en WhatsApp');
    } else if (error.code === 21608) {
      throw new Error('N√∫mero de tel√©fono no est√° verificado en WhatsApp Business');
    } else {
      throw new Error('Error al enviar el c√≥digo por WhatsApp');
    }
  }
};

// Funci√≥n para enviar mensaje de recuperaci√≥n de contrase√±a por WhatsApp
const enviarRecuperacionWhatsApp = async (telefono, nombre, resetUrl) => {
  try {
    if (!validarTelefono(telefono)) {
      throw new Error('Formato de n√∫mero de tel√©fono inv√°lido');
    }

    const numeroFormateado = formatearTelefono(telefono);
    
    const mensaje = `üîê *Digital Sign - Recuperaci√≥n de Contrase√±a*

Hola *${nombre}*,

Has solicitado restablecer tu contrase√±a en Digital Sign.

üîó Haz clic en el siguiente enlace para crear una nueva contrase√±a:

${resetUrl}

‚è∞ Este enlace es v√°lido por 1 hora.

üîí Si no solicitaste este cambio, puedes ignorar este mensaje.

---
*Digital Sign - Sistema de Firma Digital*`;

    const message = await client.messages.create({
      body: mensaje,
      from: `whatsapp:${whatsappConfig.fromNumber}`,
      to: `whatsapp:${numeroFormateado}`
    });

    console.log('‚úÖ Mensaje de recuperaci√≥n WhatsApp enviado:', message.sid);
    return {
      success: true,
      messageId: message.sid,
      to: numeroFormateado
    };

  } catch (error) {
    console.error('‚ùå Error enviando recuperaci√≥n WhatsApp:', error);
    throw new Error('Error al enviar el mensaje de recuperaci√≥n por WhatsApp');
  }
};

// Funci√≥n para verificar si un n√∫mero est√° registrado en WhatsApp
const verificarNumeroWhatsApp = async (telefono) => {
  try {
    if (!validarTelefono(telefono)) {
      return false;
    }

    const numeroFormateado = formatearTelefono(telefono);
    
    // Intentar enviar un mensaje de prueba (ser√° rechazado si el n√∫mero no est√° en WhatsApp)
    const message = await client.messages.create({
      body: 'Test',
      from: `whatsapp:${whatsappConfig.fromNumber}`,
      to: `whatsapp:${numeroFormateado}`
    });

    // Si llega aqu√≠, el n√∫mero est√° en WhatsApp
    return true;

  } catch (error) {
    // Si hay error, probablemente el n√∫mero no est√° en WhatsApp
    console.log('N√∫mero no verificado en WhatsApp:', telefono);
    return false;
  }
};

module.exports = {
  enviarCodigoWhatsApp,
  enviarRecuperacionWhatsApp,
  validarTelefono,
  formatearTelefono,
  verificarNumeroWhatsApp
}; 