const mongoose = require('mongoose');
const Certificate = require('../src/models/Certificate');

// Configuraci√≥n de conexi√≥n
const MONGODB_URI = 'mongodb://admin:MongoDB2024%21%40%23Seguro@mongodb:27017/firmasDB?authSource=admin';

async function verifyCertificates() {
  try {
    console.log('üîç Conectando a MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');

    console.log('\nüîç Verificando certificados...');
    const certificates = await Certificate.find({});
    
    if (certificates.length === 0) {
      console.log('‚ÑπÔ∏è No hay certificados en la base de datos');
      return;
    }

    console.log(`üìä Total de certificados encontrados: ${certificates.length}\n`);

    let validCount = 0;
    let invalidCount = 0;
    const invalidCertificates = [];

    for (const cert of certificates) {
      console.log(`üîç Verificando certificado: ${cert.nombreComun || 'Sin nombre'} (${cert._id})`);
      
      const issues = [];
      
      // Verificar datos cifrados
      if (!cert.datosCifrados || cert.datosCifrados.length === 0) {
        issues.push('‚ùå datosCifrados: VAC√çO o NO EXISTE');
      } else {
        console.log(`   ‚úÖ datosCifrados: ${cert.datosCifrados.length} bytes`);
      }
      
      // Verificar salt
      if (!cert.encryptionSalt || cert.encryptionSalt.length !== 32) {
        issues.push(`‚ùå encryptionSalt: ${cert.encryptionSalt ? cert.encryptionSalt.length : 0} caracteres (debe ser 32)`);
      } else {
        console.log(`   ‚úÖ encryptionSalt: ${cert.encryptionSalt.length} caracteres`);
      }
      
      // Verificar IV
      if (!cert.encryptionKey || cert.encryptionKey.length !== 32) {
        issues.push(`‚ùå encryptionKey: ${cert.encryptionKey ? cert.encryptionKey.length : 0} caracteres (debe ser 32)`);
      } else {
        console.log(`   ‚úÖ encryptionKey: ${cert.encryptionKey.length} caracteres`);
      }
      
      // Verificar metadatos
      if (!cert.nombreComun) issues.push('‚ùå nombreComun: FALTANTE');
      if (!cert.organizacion) issues.push('‚ùå organizacion: FALTANTE');
      if (!cert.email) issues.push('‚ùå email: FALTANTE');
      
      if (issues.length === 0) {
        console.log('   ‚úÖ Certificado V√ÅLIDO\n');
        validCount++;
      } else {
        console.log('   ‚ùå Certificado INV√ÅLIDO:');
        issues.forEach(issue => console.log(`      ${issue}`));
        console.log('');
        invalidCount++;
        invalidCertificates.push({
          id: cert._id,
          nombre: cert.nombreComun,
          issues: issues
        });
      }
    }

    // Resumen
    console.log('üìä RESUMEN DE VERIFICACI√ìN:');
    console.log(`   ‚úÖ Certificados v√°lidos: ${validCount}`);
    console.log(`   ‚ùå Certificados inv√°lidos: ${invalidCount}`);
    
    if (invalidCertificates.length > 0) {
      console.log('\nüö® CERTIFICADOS INV√ÅLIDOS:');
      invalidCertificates.forEach(cert => {
        console.log(`   - ${cert.nombre || 'Sin nombre'} (${cert.id})`);
        cert.issues.forEach(issue => console.log(`     ${issue}`));
      });
      
      console.log('\nüí° RECOMENDACIONES:');
      console.log('   1. Eliminar certificados inv√°lidos');
      console.log('   2. Regenerar certificados desde el frontend');
      console.log('   3. Verificar que el proceso de cifrado funcione correctamente');
    }

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Desconectado de MongoDB');
  }
}

// Ejecutar verificaci√≥n
verifyCertificates();
